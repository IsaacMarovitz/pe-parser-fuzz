_RINvNtCs9YAAjXVLP0d_8bytemuck7checked14try_from_bytesNtNtCs5jk9VwcsORH_9pe_parser7section14section_headerEBT_:
  249|    133|pub fn try_from_bytes<T: CheckedBitPattern>(
  250|    133|  s: &[u8],
  251|    133|) -> Result<&T, CheckedCastError> {
  252|    133|  let pod = unsafe { internal::try_from_bytes(s) }?;
  253|       |
  254|    133|  if <T as CheckedBitPattern>::is_valid_bit_pattern(pod) {
  255|    133|    Ok(unsafe { &*(pod as *const <T as CheckedBitPattern>::Bits as *const T) })
  256|       |  } else {
  257|      0|    Err(CheckedCastError::InvalidBitPattern)
  258|       |  }
  259|    133|}
_RNvXNtCs9YAAjXVLP0d_8bytemuck7checkedNtNtCs5jk9VwcsORH_9pe_parser8optional18optional_header_32NtB2_17CheckedBitPattern20is_valid_bit_patternBD_:
  147|      1|  fn is_valid_bit_pattern(_bits: &T) -> bool {
  148|      1|    true
  149|      1|  }
_RNvXNtCs9YAAjXVLP0d_8bytemuck7checkedNtNtCs5jk9VwcsORH_9pe_parser4coff16coff_file_headerNtB2_17CheckedBitPattern20is_valid_bit_patternBD_:
  147|     32|  fn is_valid_bit_pattern(_bits: &T) -> bool {
  148|     32|    true
  149|     32|  }
_RINvNtCs9YAAjXVLP0d_8bytemuck7checked14try_from_bytesNtNtCs5jk9VwcsORH_9pe_parser4coff16coff_file_headerEBT_:
  249|     33|pub fn try_from_bytes<T: CheckedBitPattern>(
  250|     33|  s: &[u8],
  251|     33|) -> Result<&T, CheckedCastError> {
  252|     33|  let pod = unsafe { internal::try_from_bytes(s) }?;
  253|       |
  254|     32|  if <T as CheckedBitPattern>::is_valid_bit_pattern(pod) {
  255|     32|    Ok(unsafe { &*(pod as *const <T as CheckedBitPattern>::Bits as *const T) })
  256|       |  } else {
  257|      0|    Err(CheckedCastError::InvalidBitPattern)
  258|       |  }
  259|     33|}
_RINvNtCs9YAAjXVLP0d_8bytemuck7checked14try_from_bytesNtNtCs5jk9VwcsORH_9pe_parser8optional18optional_header_32EBT_:
  249|      1|pub fn try_from_bytes<T: CheckedBitPattern>(
  250|      1|  s: &[u8],
  251|      1|) -> Result<&T, CheckedCastError> {
  252|      1|  let pod = unsafe { internal::try_from_bytes(s) }?;
  253|       |
  254|      1|  if <T as CheckedBitPattern>::is_valid_bit_pattern(pod) {
  255|      1|    Ok(unsafe { &*(pod as *const <T as CheckedBitPattern>::Bits as *const T) })
  256|       |  } else {
  257|      0|    Err(CheckedCastError::InvalidBitPattern)
  258|       |  }
  259|      1|}
_RINvNtCs9YAAjXVLP0d_8bytemuck7checked14try_from_bytesNtNtCs5jk9VwcsORH_9pe_parser8optional18optional_header_64EBT_:
  249|      2|pub fn try_from_bytes<T: CheckedBitPattern>(
  250|      2|  s: &[u8],
  251|      2|) -> Result<&T, CheckedCastError> {
  252|      2|  let pod = unsafe { internal::try_from_bytes(s) }?;
  253|       |
  254|      1|  if <T as CheckedBitPattern>::is_valid_bit_pattern(pod) {
  255|      1|    Ok(unsafe { &*(pod as *const <T as CheckedBitPattern>::Bits as *const T) })
  256|       |  } else {
  257|      0|    Err(CheckedCastError::InvalidBitPattern)
  258|       |  }
  259|      2|}
_RNvXNtCs9YAAjXVLP0d_8bytemuck7checkedNtNtCs5jk9VwcsORH_9pe_parser8optional18optional_header_64NtB2_17CheckedBitPattern20is_valid_bit_patternBD_:
  147|      1|  fn is_valid_bit_pattern(_bits: &T) -> bool {
  148|      1|    true
  149|      1|  }
_RNvXNtCs9YAAjXVLP0d_8bytemuck7checkedNtNtCs5jk9VwcsORH_9pe_parser7section14section_headerNtB2_17CheckedBitPattern20is_valid_bit_patternBD_:
  147|    133|  fn is_valid_bit_pattern(_bits: &T) -> bool {
  148|    133|    true
  149|    133|  }
_RNvXs2_NtCs9YAAjXVLP0d_8bytemuck7checkedNtB5_16CheckedCastErrorINtNtCsebjFxV5eXNM_4core7convert4FromNtB7_12PodCastErrorE4from:
  236|      2|  fn from(err: crate::PodCastError) -> CheckedCastError {
  237|      2|    CheckedCastError::PodCastError(err)
  238|      2|  }

_RINvNtCs9YAAjXVLP0d_8bytemuck8internal14try_from_bytesNtNtCs5jk9VwcsORH_9pe_parser4coff16coff_file_headerEBU_:
  140|     33|pub(crate) unsafe fn try_from_bytes<T: Copy>(
  141|     33|  s: &[u8],
  142|     33|) -> Result<&T, PodCastError> {
  143|     33|  if s.len() != size_of::<T>() {
  144|      0|    Err(PodCastError::SizeMismatch)
  145|     33|  } else if (s.as_ptr() as usize) % align_of::<T>() != 0 {
  146|      1|    Err(PodCastError::TargetAlignmentGreaterAndInputNotAligned)
  147|       |  } else {
  148|     32|    Ok(unsafe { &*(s.as_ptr() as *const T) })
  149|       |  }
  150|     33|}
_RINvNtCs9YAAjXVLP0d_8bytemuck8internal14try_from_bytesNtNtCs5jk9VwcsORH_9pe_parser7section14section_headerEBU_:
  140|    133|pub(crate) unsafe fn try_from_bytes<T: Copy>(
  141|    133|  s: &[u8],
  142|    133|) -> Result<&T, PodCastError> {
  143|    133|  if s.len() != size_of::<T>() {
  144|      0|    Err(PodCastError::SizeMismatch)
  145|    133|  } else if (s.as_ptr() as usize) % align_of::<T>() != 0 {
  146|      0|    Err(PodCastError::TargetAlignmentGreaterAndInputNotAligned)
  147|       |  } else {
  148|    133|    Ok(unsafe { &*(s.as_ptr() as *const T) })
  149|       |  }
  150|    133|}
_RINvNtCs9YAAjXVLP0d_8bytemuck8internal14try_from_bytesNtNtCs5jk9VwcsORH_9pe_parser8optional18optional_header_32EBU_:
  140|      1|pub(crate) unsafe fn try_from_bytes<T: Copy>(
  141|      1|  s: &[u8],
  142|      1|) -> Result<&T, PodCastError> {
  143|      1|  if s.len() != size_of::<T>() {
  144|      0|    Err(PodCastError::SizeMismatch)
  145|      1|  } else if (s.as_ptr() as usize) % align_of::<T>() != 0 {
  146|      0|    Err(PodCastError::TargetAlignmentGreaterAndInputNotAligned)
  147|       |  } else {
  148|      1|    Ok(unsafe { &*(s.as_ptr() as *const T) })
  149|       |  }
  150|      1|}
_RINvNtCs9YAAjXVLP0d_8bytemuck8internal14try_from_bytesNtNtCs5jk9VwcsORH_9pe_parser8optional18optional_header_64EBU_:
  140|      2|pub(crate) unsafe fn try_from_bytes<T: Copy>(
  141|      2|  s: &[u8],
  142|      2|) -> Result<&T, PodCastError> {
  143|      2|  if s.len() != size_of::<T>() {
  144|      0|    Err(PodCastError::SizeMismatch)
  145|      2|  } else if (s.as_ptr() as usize) % align_of::<T>() != 0 {
  146|      1|    Err(PodCastError::TargetAlignmentGreaterAndInputNotAligned)
  147|       |  } else {
  148|      1|    Ok(unsafe { &*(s.as_ptr() as *const T) })
  149|       |  }
  150|      2|}

_RNvNvCskgiBqrqMxbH_9pe_parser1__19___libfuzzer_sys_run:
  241|     43|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|     43|                $body
  243|     43|            }
rust_fuzzer_test_input:
  215|     43|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|     43|                }
  223|     43|
  224|     43|                __libfuzzer_sys_run(bytes);
  225|     43|                0
  226|     43|            }
LLVMFuzzerTestOneInput:
   58|     43|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|     43|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|     43|    });
   63|     43|
   64|     43|    match test_input {
   65|     43|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|     43|}
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}
_RNCNvCshQ3hok0ilBm_13libfuzzer_sys15test_input_wrap0B3_:
   59|     43|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|     43|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|     43|        rust_fuzzer_test_input(data_slice)
   62|     43|    });

_RNvYNtNtCs5jk9VwcsORH_9pe_parser8optional5MagicNtNtCs3apE2OUz8V3_10num_traits4cast13FromPrimitive8from_u16B6_:
  474|      7|    fn from_u16(n: u16) -> Option<Self> {
  475|      7|        FromPrimitive::from_u64(From::from(n))
  476|      7|    }

_RNvMs2_NtCsaaWuk1HnRyu_9once_cell3impINtB5_8OnceCellNtNtCs7qXgtb5XhM9_5alloc6string6StringE14is_initializedCshQ3hok0ilBm_13libfuzzer_sys:
   59|     43|    pub(crate) fn is_initialized(&self) -> bool {
   60|     43|        // An `Acquire` load is enough because that makes all the initialization
   61|     43|        // operations visible to us, and, this being a fast path, weaker
   62|     43|        // ordering helps with performance. This `Acquire` synchronizes with
   63|     43|        // `SeqCst` operations on the slow path.
   64|     43|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   65|     43|    }

_RNvMs4_NtCsaaWuk1HnRyu_9once_cell4syncINtB5_8OnceCellNtNtCs7qXgtb5XhM9_5alloc6string6StringE3getCshQ3hok0ilBm_13libfuzzer_sys:
  931|     43|        pub fn get(&self) -> Option<&T> {
  932|     43|            if self.0.is_initialized() {
  933|       |                // Safe b/c value is initialized.
  934|      0|                Some(unsafe { self.get_unchecked() })
  935|       |            } else {
  936|     43|                None
  937|       |            }
  938|     43|        }

_RNvXs7_NtCs5jk9VwcsORH_9pe_parser4coffNtB5_16coff_file_headerNtNtCsebjFxV5eXNM_4core7default7Default7defaultB7_:
    9|     34|#[derive(Copy, Clone, Pod, Zeroable, Default)]

_RNvXs5_NtCs5jk9VwcsORH_9pe_parser8optionalNtB5_18optional_header_64NtB5_8Optional21parse_optional_header:
  478|      3|    fn parse_optional_header(binary: &[u8], offset: &mut usize) -> Result<Self, Error> {
  479|      3|        let size = std::mem::size_of::<Self>();
  480|      3|        let slice = match binary.get(*offset..*offset+size) {
  481|      2|            Some(slice) => slice,
  482|       |            None => {
  483|      1|                return Err(Error::new(ErrorKind::Other, "Offset out of range!"));
  484|       |            }
  485|       |        };
  486|       |    
  487|      2|        let optional_header = try_from_bytes::<optional_header_64>(slice);
  488|      2|        *offset += size;
  489|      2|        match optional_header.copied() {
  490|      1|            Ok(header) => {
  491|      1|                return Ok(header);
  492|       |            }
  493|       |            Err(_) => {
  494|      1|                return Err(Error::new(ErrorKind::Other, "Failed to parse header!"));
  495|       |            }
  496|       |        }
  497|      3|    }
_RNvXs4_NtCs5jk9VwcsORH_9pe_parser8optionalNtB5_18optional_header_32NtB5_8Optional21parse_optional_header:
  446|      2|    fn parse_optional_header(binary: &[u8], offset: &mut usize) -> Result<Self, Error> {
  447|      2|        let size = std::mem::size_of::<Self>();
  448|      2|        let slice = match binary.get(*offset..*offset+size) {
  449|      1|            Some(slice) => slice,
  450|       |            None => {
  451|      1|                return Err(Error::new(ErrorKind::Other, "Offset out of range!"));
  452|       |            }
  453|       |        };
  454|       |
  455|      1|        let optional_header = try_from_bytes::<optional_header_32>(slice);
  456|      1|        *offset += size;
  457|      1|        
  458|      1|        match optional_header.copied() {
  459|      1|            Ok(header) => {
  460|      1|                return Ok(header);
  461|       |            }
  462|       |            Err(_) => {
  463|      0|                return Err(Error::new(ErrorKind::Other, "Failed to parse header!"));
  464|       |            }
  465|       |        }
  466|      2|    }
_RNvXNvNtCs5jk9VwcsORH_9pe_parser8optional33__IMPL_NUM_FromPrimitive_FOR_MagicNtB4_5MagicNtNtCs3apE2OUz8V3_10num_traits4cast13FromPrimitive8from_i64B6_:
   10|      7|#[derive(FromPrimitive, Debug)]
_RNvXNvNtCs5jk9VwcsORH_9pe_parser8optional33__IMPL_NUM_FromPrimitive_FOR_MagicNtB4_5MagicNtNtCs3apE2OUz8V3_10num_traits4cast13FromPrimitive8from_u64B6_:
   10|      7|#[derive(FromPrimitive, Debug)]

_RNvNtCs5jk9VwcsORH_9pe_parser2pe25parse_portable_executable:
   22|     43|pub fn parse_portable_executable(binary: &[u8]) -> Result<PortableExecutable, Error> {
   23|     43|    let mut offset = read_u16(binary, IMAGE_DOS_PE_SIGNATURE_OFFSET)?.into();
   24|       |
   25|     42|    let slice = match binary.get(offset..offset+4) {
   26|     40|        Some(slice) => slice,
   27|       |        None => {
   28|      2|            return Err(Error::new(ErrorKind::Other, "Offset out of range!"))
   29|       |        }
   30|       |    };
   31|       |
   32|     40|    let string = match String::from_utf8(slice.to_vec()) {
   33|     38|        Ok(string) => string,
   34|       |        Err(_) => {
   35|      2|            return Err(Error::new(ErrorKind::Other, "Failed to parse string!"));
   36|       |        }
   37|       |    };
   38|       |
   39|     38|    if string != "PE\0\0" {
   40|      4|        return Err(Error::new(ErrorKind::InvalidData, "File is not a valid PE!"));
   41|     34|    }
   42|     34|
   43|     34|    offset += 4;
   44|     34|
   45|     34|    let mut pe: PortableExecutable = PortableExecutable { 
   46|     34|        coff: coff_file_header::default(), 
   47|     34|        optional_header_32: None, 
   48|     34|        optional_header_64: None, 
   49|     34|        section_table: Vec::new()
   50|     34|    };
   51|       |
   52|     34|    let slice = match binary.get(offset..offset+20) {
   53|     33|        Some(slice) => slice,
   54|       |        None => {
   55|      1|            return Err(Error::new(ErrorKind::Other, "Offset out of range!"))
   56|       |        }
   57|       |    };
   58|       |
   59|     33|    pe.coff = match try_from_bytes::<coff_file_header>(slice) {
   60|     32|        Ok(coff) => *coff,
   61|       |        Err(_) => {
   62|      1|            return Err(Error::new(ErrorKind::Other, "Failed to get COFF header!"));
   63|       |        }
   64|       |    };
   65|       |
   66|     32|    offset += 20;
   67|     32|
   68|     32|    if pe.coff.size_of_optional_header != 0 {
   69|      8|        let magic = match Magic::from_u16(read_u16(binary, offset)?) {
   70|      5|            Some(magic) => magic,
   71|       |            None => {
   72|      2|                return Err(Error::new(ErrorKind::Other, "Failed to get Magic!"));
   73|       |            }
   74|       |        };
   75|       |
   76|      5|        match magic {
   77|       |            Magic::PE32 => {
   78|      2|                pe.optional_header_32 = Some(optional_header_32::parse_optional_header(binary, &mut offset)?);
   79|       |            }
   80|       |            Magic::PE64 => {
   81|      3|                pe.optional_header_64 = Some(optional_header_64::parse_optional_header(binary, &mut offset)?);
   82|       |            }
   83|       |        }
   84|     24|    }
   85|       |
   86|     26|    pe.section_table = parse_section_table(binary, offset, pe.coff.number_of_sections);
   87|     26|
   88|     26|    /*for section in pe.section_table.iter() {
   89|     26|        let name = match section.get_name() {
   90|     26|            Some(name) => name,
   91|     26|            None => {
   92|     26|                return Err(Error::new(ErrorKind::Other, "Failed to get section name"));
   93|     26|            }
   94|     26|        };
   95|     26|
   96|     26|        match name.trim_end_matches(char::from(0)) {
   97|     26|            ".edata" => {
   98|     26|                println!(".edata Section");
   99|     26|            }
  100|     26|            ".idata" => {
  101|     26|                println!(".idata Section");
  102|     26|            }
  103|     26|            _ => {}
  104|     26|        }
  105|     26|    }*/
  106|     26|
  107|     26|    Ok(pe)
  108|     43|}
_RNvNtCs5jk9VwcsORH_9pe_parser2pe8read_u16:
  137|     51|    if let Some(array) = binary.get(offset..offset+2) {
  138|     49|        if let Some(slice) = array.try_into().ok() {
  139|     49|            return Ok(u16::from_le_bytes(slice));
  140|      0|        }
  141|      2|    }
  142|       |
  143|      2|    Err(Error::new(ErrorKind::Other, "Failed to get value"))
  144|     51|}

_RNvNtCs5jk9VwcsORH_9pe_parser7section19parse_section_table:
    9|     26|pub fn parse_section_table(binary: &[u8], offset: usize, number_of_sections: u16) -> Vec<section_header> {
   10|     26|    let mut offset = offset;
   11|     26|    let mut headers: Vec<section_header> = Vec::new();
   12|     26|    let header_size = std::mem::size_of::<section_header>();
   13|     26|
   14|     26|    for _ in 0..number_of_sections {
   15|   452k|        if let Some(slice) = binary.get(offset..offset+header_size) {
   16|    133|            if let Some(header) = try_from_bytes::<section_header>(slice).ok() {
   17|    133|                headers.push(*header);
   18|    133|            }
   19|   452k|        }
   20|   452k|        offset += header_size;
   21|       |    }
   22|       |
   23|     26|    headers
   24|     26|}

